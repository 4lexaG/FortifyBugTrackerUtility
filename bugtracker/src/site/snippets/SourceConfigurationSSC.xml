<?xml version="1.0" encoding="UTF-8"?>
<!--
  (c) Copyright 2017 EntIT Software LLC, a Micro Focus company
  
  Permission is hereby granted, free of charge, to any person obtaining a 
  copy of this software and associated documentation files (the 
  "Software"), to deal in the Software without restriction, including without 
  limitation the rights to use, copy, modify, merge, publish, distribute, 
  sublicense, and/or sell copies of the Software, and to permit persons to 
  whom the Software is furnished to do so, subject to the following 
  conditions:
  
  The above copyright notice and this permission notice shall be included 
  in all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
  IN THE SOFTWARE.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">
	
	<!-- START SNIPPET: bean -->
	<bean class="com.fortify.bugtracker.src.ssc.config.SSCSourceVulnerabilitiesConfiguration">
		<!-- By default, the following fields can be referenced in this configuration file:
		     * ${fieldName}
		       Any field returned by the SSC /api/v1/projectVersions/${projectVersionId}/issues endpoint
		     * ${deepLink}
		       Browser-viewable deep link to SSC vulnerability
		     * ${bugURL}
		       Native SSC bug link, or bug link as stored in custom tag (see bugLinkCustomTagName and addNativeBugLink below)
		     * ${details.fieldName} 
		       Any field returned by the SSC /api/v1/issueDetails/${id} endpoint
		     * ${#ctx.SSCApplicationVersion.fieldName}
		       Any field returned by the SSC /api/v1/projectVersions endpoint
		     * ${#ctx.SSCApplicationVersion.deepLink}
		       Browser-viewable deep link to SSC application version
		       
		     The extraVulnerabilityData property can be used to retrieve additional data from SSC. Each entry defines
		     a property name as key, and relative API endpoint URI as value. The URI may contain request parameters
		     like 'fields' or 'embed'. All fields returned by such an endpoint can then be referenced through
		     ${key.fieldName}.
		     
		     These endpoints are called on-demand whenever a corresponding property is requested, and will be cached
		     for individual vulnerabilities. If you define any endpoints that are relevant for multiple vulnerabilities
		     (i.e. related to application version, artifacts, scans, ...), you may want to add ';cache=true' to the
		     endpoint URI to avoid calling the same endpoint for each vulnerability.
		-->
		<property name="extraVulnerabilityData"><map>
			<entry key="comments" value="/api/v1/issues/${id}/comments"/>
			<entry key="auditHistory" value="/api/v1/issues/${id}/auditHistory"/>
			<entry key="lastScan" value="/api/v1/scans/${lastScanId};cache=true"/>
			<entry key="lastArtifact" value="/api/v1/artifacts/${lastScan.artifactId};cache=true"/>
		</map></property>
	
		<!-- Set the SSC filter string to get the list of vulnerabilities to be submitted to
		     the external system. Please see the Syntax Guide for the SSC search box for
		     information about the syntax for this filter. You can use the same SSC search
		     box to test your filter strings. -->
		<property name="filterStringForVulnerabilitiesToBeSubmitted"><value>
			analysis:exploitable
		</value></property>
		
		<!-- Set additional filters for vulnerabilities to be submitted to the external
		     system, if you require any filtering that cannot be performed by SSC directly. -->
		<property name="regExFiltersForVulnerabilitiesToBeSubmitted"><map>
			<!-- <entry key="someField.someSubField" value="Regular Expression"/> -->
		</map></property>
		
		<!-- Specify whether, and how information about the submitted vulnerabilities
		     should be added to SSC. If all of these are disabled, no information
		     about the submitted vulnerability will be stored in SSC, resulting in
		     all vulnerabilities being submitted again on a next invocation, and
		     disabling bug state management. You should enable at most one of these
		     options. Bug data can either be stored in a custom tag, or submitted
		     through the SSC 'Add Existing Bugs' custom bug tracker integration, to
		     be stored as a native SSC bug tracker link. -->
		<property name="bugLinkCustomTagName" value="OctaneBugLink"/>
		<!-- <property name="addNativeBugLink" value="true"/> -->
		
		<!-- Allow the user to see ALM Octane issue phase name in SSC. Any custom tags that 
		     do not exist or are not assigned to the application version will be ignored. -->
		<property name="extraCustomTags"><map>
			<entry key="OctaneIssueState" value="${issueStateDetails.phase.name}"/>
		</map></property>
		
		<!-- This property enables a work-around where the SSC doesn't return the correct 
		     vulnerability revision when retrieving the list of vulnerabilities for an
		     application version, until the metrics for that application version have been
		     refreshed. This is a known bug in SSC 16.20 and possibly older versions; SSC
		     17.10 and up should not need this work-around. Please enable this property if
		      you consistently get an error
		     'Conflict detected! There is a newer revision of the selected issue on the server.'
		     when FortifyBugTrackerUtility tries to update custom tags in SSC. -->
		<!-- <property name="enableRevisionWorkAround" value="true"/> -->
		
		<!-- This property defines the expression for evaluating whether an SSC 
		     vulnerability should be considered open or closed. This expression
		     can use any SSC vulnerability attribute. Commonly used attributes
		     for this expression include removed and suppressed. -->
		<property name="isVulnerabilityOpenExpression"><value><![CDATA[
			removed==false && suppressed==false
		]]></value></property>
	</bean>
	<!-- END SNIPPET: bean -->
</beans>
