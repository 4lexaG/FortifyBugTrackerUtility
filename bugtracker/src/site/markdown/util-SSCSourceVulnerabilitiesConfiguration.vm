#macro( printSSCSourceVulnerabilitiesConfigurationProperties )
#set( $propertyMap = {
	"filterStringForVulnerabilitiesToBeSubmitted": "Set the SSC filter string to get the list of vulnerabilities to be submitted to
		     the external system. Please see the Syntax Guide for the SSC search box for
		     information about the syntax for this filter. You can use the same SSC search
		     box to test your filter strings.",
	"filterSetId": "By default, the utility will select vulnerabilities to be submitted from the
	         default SSC filter set. This property allows for specifying a different filter set.
	         For example, you could define a filter set that is specifically designed to select
	         the vulnerabilities to be submitted to a bug tracker. This would allow for optimized
	         retrieval of those vulnerabilities, without having to depend on the more limited 
	         filterStringForVulnerabilitiesToBeSubmitted and less efficient 
	         regExFiltersForVulnerabilitiesToBeSubmitted properties."
	"bugLinkCustomTagName": "In most cases, FortifyBugTrackerUtility will need to keep track of which
			SSC vulnerabilities have been submitted to which target issues, for example to avoid
			re-submitting vulnerabilities that have been submitted previously, and to perform state
			management. This property allows for specifying an SSC custom tag name where the URL
			to the target issue is being stored. Alternatively these links can be stored as native
			SSC bug links; see `addNativeBugLink` below.",
	"addNativeBugLink": "Instead of storing links to target issues in a custom tag (see `bugLinkCustomTagName` property),
			these links can also be stored as native SSC bug links. The advantage is that users can then
			click the bug link in SSC to navigate to the corresponding target issue. For this functionality
			you will need to install the 'Add Existing Bugs' plugin in SSC and activate it for the relevant
			application versions. Main disadvantages of this functionality are that SSC only supports a
			single bug tracker plugin for each application version (disallowing you to store links to 
			multiple target systems), and reduced performance when running FortifyBugTrackerUtility
			because SSC does not provide native filtering of vulnerabilities based on whether a bug link
			exists or not. This property can be set to either `true` or `false`",
	"addNativeBugLinkBugTrackerName": "By default, when `addNativeBugLink` is enabled, FortifyBugTrackerUtility
			will look for an SSC bug tracker plugin named `Add Existing Bugs`. In rare cases you may require
			a customized version of this plugin; if so you can configure a different SSC bug tracker plugin
			name using this property.",
	"extraCustomTags": "This property allows for setting SSC custom tags based on target issue state. For
			example, this functionality can allow you to display current status or assignee of the target
			issue in SSC. This property takes a map, with custom tag names as keys, and an SpEL expression
			as value. The target properties that can be used in this SpEL expression are dependent on the
			chosen target implementation.",
	"enableRevisionWorkAround": "This property enables a work-around where the SSC doesn't return the correct 
		     vulnerability revision when retrieving the list of vulnerabilities for an
		     application version, until the metrics for that application version have been
		     refreshed. This is a known bug in SSC 16.20 and possibly older versions; SSC
		     17.10 and up should not need this work-around. Please enable this property if
		      you consistently get an error
		     `Conflict detected! There is a newer revision of the selected issue on the server.`
		     when FortifyBugTrackerUtility tries to update custom tags in SSC."
})
#printProperties($propertyMap)
#printAbstractSourceVulnerabilitiesConfigurationProperties("SSC" "removed==false && suppressed==false")
#end