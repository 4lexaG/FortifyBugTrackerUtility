/*******************************************************************************
 * (c) Copyright 2017 EntIT Software LLC, a Micro Focus company
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.bugtracker.src.ssc.processor;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.fortify.bugtracker.common.src.processor.AbstractSourceVulnerabilityProcessor;
import com.fortify.bugtracker.common.ssc.cli.ICLIOptionsSSC;
import com.fortify.bugtracker.common.ssc.connection.SSCConnectionFactory;
import com.fortify.bugtracker.common.ssc.context.IContextSSCCommon;
import com.fortify.bugtracker.common.ssc.json.preprocessor.enrich.SSCJSONMapEnrichWithOnDemandBugURLFromCustomTag;
import com.fortify.bugtracker.common.tgt.issue.TargetIssueLocatorAndFields;
import com.fortify.bugtracker.src.ssc.config.SSCSourceVulnerabilitiesConfiguration;
import com.fortify.client.ssc.api.SSCBugTrackerAPI;
import com.fortify.client.ssc.api.SSCCustomTagAPI;
import com.fortify.client.ssc.api.SSCIssueAPI;
import com.fortify.client.ssc.api.query.builder.SSCApplicationVersionIssuesQueryBuilder;
import com.fortify.client.ssc.connection.SSCAuthenticatingRestConnection;
import com.fortify.processrunner.cli.CLIOptionDefinition;
import com.fortify.processrunner.cli.CLIOptionDefinitions;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.context.ContextSpringExpressionUtil;
import com.fortify.processrunner.processor.IProcessor;
import com.fortify.util.rest.json.preprocessor.enrich.JSONMapEnrichWithValue;
import com.fortify.util.spring.expression.TemplateExpression;

/**
 * This abstract {@link IProcessor} implementation provides some common functionality used by 
 * {@link SSCSourceProcessorSubmitVulnsToTarget} and {@link SSCSourceProcessorUpdateVulnsOnTarget}, like storing 
 * the {@link SSCSourceVulnerabilitiesConfiguration}, checking the {@link Context}, and providing 
 * SSC connection-related {@link CLIOptionDefinition} instances.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractSSCSourceVulnerabilityProcessor extends AbstractSourceVulnerabilityProcessor<SSCSourceVulnerabilitiesConfiguration> {
	/**
	 * Add SSC connection property definitions
	 */
	@Override
	public final void addCLIOptionDefinitions(CLIOptionDefinitions cliOptionDefinitions) {
		SSCConnectionFactory.addCLIOptionDefinitions(cliOptionDefinitions);
		cliOptionDefinitions.add(ICLIOptionsSSC.CLI_SSC_APPLICATION_VERSION_ID);
		if ( getVulnerabilityProcessor() != null ) {
			getVulnerabilityProcessor().addCLIOptionDefinitions(cliOptionDefinitions);
		}
		addSourceCLIOptionDefinitions(cliOptionDefinitions);
	}
	
	protected void addSourceCLIOptionDefinitions(CLIOptionDefinitions cliOptionDefinitions) {}

	@Override
	protected IProcessor createProcessorRetrieveAndProcessVulnerabilities(Context context) {
		return new SSCSourceProcessorRetrieveVulnerabilities(getVulnerabilityQuery(context), getVulnerabilityProcessor(), getPurpose());
	}
	
	@Override
	protected String getVulnBugLinkFieldName() {
		return "bugURL";
	}
	
	/**
	 * Check whether current application version has the correct configuration
	 * for updating vulnerability state based on our configuration.
	 * @param context
	 */
	@Override
	protected void checkContext(Context context) {
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ICLIOptionsSSC.CLI_SSC_APPLICATION_VERSION_ID.getValue(context);
		if ( StringUtils.isNotBlank(getConfiguration().getBugLinkCustomTagName()) ) {
			List<String> customTagNames = conn.api(SSCCustomTagAPI.class).getApplicationVersionCustomTagNames(applicationVersionId, true);
			if ( customTagNames==null || !customTagNames.contains(getConfiguration().getBugLinkCustomTagName()) ) {
				throw new IllegalStateException("Configured custom tag "+getConfiguration().getBugLinkCustomTagName()+" is not available for application version "+applicationVersionId);
			}
		} else if ( getConfiguration().isAddNativeBugLink() ) {
			String configBugTrackerName = getConfiguration().getAddNativeBugLinkBugTrackerName();
			String avBugTrackerName = conn.api(SSCBugTrackerAPI.class).getApplicationVersionBugTrackerShortName(applicationVersionId);
			if ( !configBugTrackerName.equals(avBugTrackerName) ) {
				throw new IllegalStateException("Either custom tag name or the '"+configBugTrackerName+"' SSC bug tracker needs to be configured");
			}
		}
	}
	
	protected SSCApplicationVersionIssuesQueryBuilder createSSCVulnerabilityBaseQueryBuilder(Context context) {
		SSCApplicationVersionIssuesQueryBuilder result = SSCConnectionFactory.getConnection(context).api(SSCIssueAPI.class)
				.queryIssues(ICLIOptionsSSC.CLI_SSC_APPLICATION_VERSION_ID.getValue(context))
				.onDemandDetails() // Required to get bug link from custom tags, and to get issue revision
				.preProcessor(new JSONMapEnrichWithValue("applicationVersion", context.as(IContextSSCCommon.class).getApplicationVersion()));
		if ( StringUtils.isNotBlank(getConfiguration().getBugLinkCustomTagName()) ) {
			result.preProcessor(new SSCJSONMapEnrichWithOnDemandBugURLFromCustomTag(getConfiguration().getBugLinkCustomTagName()));
		}
		return result;
	}

	protected boolean needCustomTagUpdate(Context context, String customTagName, String newCustomTagValue, Collection<Object> vulnerabilities) {
		return ContextSpringExpressionUtil.evaluateExpression(context, vulnerabilities, 
				"#this.?[" // Filter list of vulnerabilities 
				+"details.customTagValues.?[customTagName=='"+customTagName+"'].size()==0" // Where custom tag is not yet set
				+" || " // Or
				+"details.customTagValues.?[customTagName=='"+customTagName+"' && textValue!='"+newCustomTagValue+"'].size()>0" // Where current value is different than new value
				+"].size()>0" // Return true if there are any such vulnerabilities, false if there are none
				, Boolean.class);
	}
	
	protected Map<String,String> getExtraCustomTagValues(Context context, TargetIssueLocatorAndFields targetIssueLocatorAndFields, Collection<Object> vulnerabilities) {
		Map<String,String> result = new HashMap<String,String>();
		if ( getConfiguration().getExtraCustomTags()!=null ) {
			List<String> availableCustomTagNames = getCustomTagNames(context);
			for ( Map.Entry<String, TemplateExpression> entry : getConfiguration().getExtraCustomTags().entrySet() ) {
				if ( availableCustomTagNames.contains(entry.getKey()) ) {
					String customTagName = entry.getKey();
					String newCustomTagValue = ContextSpringExpressionUtil.evaluateExpression(context, targetIssueLocatorAndFields, entry.getValue(), String.class);
					if ( needCustomTagUpdate(context, customTagName, newCustomTagValue, vulnerabilities) ) {
						result.put(entry.getKey(), newCustomTagValue);
					}
				}
			}
		}
		return result;
	}

	protected List<String> getCustomTagNames(Context context) {
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ICLIOptionsSSC.CLI_SSC_APPLICATION_VERSION_ID.getValue(context);
		return conn.api(SSCCustomTagAPI.class).getApplicationVersionCustomTagNames(applicationVersionId, true);
	}
}
