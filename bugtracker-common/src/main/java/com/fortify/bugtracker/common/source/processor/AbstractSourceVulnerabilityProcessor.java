/*******************************************************************************
 * (c) Copyright 2017 EntIT Software LLC, a Micro Focus company
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.bugtracker.common.source.processor;

import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.fortify.bugtracker.common.processor.IProcessorWithBugTrackerName;
import com.fortify.bugtracker.common.source.config.AbstractSourceProcessorConfiguration;
import com.fortify.bugtracker.common.source.json.preprocessor.JSONMapEnrichWithVulnState;
import com.fortify.bugtracker.common.source.json.preprocessor.JSONMapEnrichWithVulnState.VulnState;
import com.fortify.bugtracker.common.target.processor.AbstractProcessorUpdateIssueStateForVulnerabilities;
import com.fortify.bugtracker.common.target.processor.IProcessorSubmitIssueForVulnerabilities;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.context.ContextPropertyDefinition;
import com.fortify.processrunner.processor.IProcessor;
import com.fortify.util.rest.json.preprocessor.filter.AbstractJSONMapFilter.MatchMode;
import com.fortify.util.rest.json.preprocessor.filter.JSONMapFilterRegEx;
import com.fortify.util.rest.query.AbstractRestConnectionQueryBuilder;
import com.fortify.util.rest.query.IRestConnectionQuery;
import com.fortify.util.spring.SpringExpressionUtil;

/**
 * TODO Update JavaDoc to make it generic/non-SSC-specific
 * This abstract {@link IProcessor} implementation provides some common functionality used by 
 * {@link SSCProcessorSubmitVulnerabilities} and {@link SSCProcessorUpdateState}, like storing 
 * the {@link SSCBugTrackerProcessorConfiguration}, checking the {@link Context}, and providing 
 * SSC connection-related {@link ContextPropertyDefinition} instances.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractSourceVulnerabilityProcessor<C extends AbstractSourceProcessorConfiguration> implements IProcessorWithBugTrackerNameAndEnabledFlag {
	private C configuration;
	private IProcessorSubmitIssueForVulnerabilities vulnerabilityProcessorForSubmit;
	private AbstractProcessorUpdateIssueStateForVulnerabilities<?> vulnerabilityProcessorForUpdate;
	
	public final IProcessorSubmitIssueForVulnerabilities getVulnerabilityProcessorForSubmit() {
		return vulnerabilityProcessorForSubmit;
	}

	@Autowired
	public final void setVulnerabilityProcessorForSubmit(IProcessorSubmitIssueForVulnerabilities vulnerabilityProcessorForSubmit) {
		this.vulnerabilityProcessorForSubmit = vulnerabilityProcessorForSubmit;
	}
	
	public final AbstractProcessorUpdateIssueStateForVulnerabilities<?> getVulnerabilityProcessorForUpdate() {
		return vulnerabilityProcessorForUpdate;
	}

	@Autowired(required=false) // non-required to avoid Spring autowiring failures if bug tracker implementation doesn't include bug state management
	public final void setVulnerabilityProcessorForUpdate(AbstractProcessorUpdateIssueStateForVulnerabilities<?> vulnerabilityProcessorForUpdate) {
		configureVulnerabilityProcessorForUpdate(vulnerabilityProcessorForUpdate);
		this.vulnerabilityProcessorForUpdate = vulnerabilityProcessorForUpdate;
	}

	protected final void configureVulnerabilityProcessorForUpdate(AbstractProcessorUpdateIssueStateForVulnerabilities<?> vulnerabilityProcessorForUpdate) {
		String bugIdFieldName = getVulnBugIdFieldName();
		String bugLinkFieldName = getVulnBugLinkFieldName();
		String bugLinkTemplateExpression = "${"+bugLinkFieldName+"}";
		// Since this is always the same, probably move to AbstractProcessorUpdateIssueStateForVulnerabilities
		vulnerabilityProcessorForUpdate.setIsVulnStateOpenExpression(SpringExpressionUtil.parseSimpleExpression(JSONMapEnrichWithVulnState.NAME_VULN_STATE+"=='"+VulnState.OPEN.name()+"'"));
		vulnerabilityProcessorForUpdate.setGroupTemplateExpression(SpringExpressionUtil.parseTemplateExpression(bugLinkTemplateExpression));
		vulnerabilityProcessorForUpdate.setVulnBugIdExpression(SpringExpressionUtil.parseSimpleExpression(bugIdFieldName));
		vulnerabilityProcessorForUpdate.setVulnBugLinkExpression(SpringExpressionUtil.parseSimpleExpression(bugLinkFieldName));
	}

	@Override
	public final boolean process(Phase phase, Context context) {
		if ( Phase.PRE_PROCESS.equals(phase) ) { checkContext(context); }
		return createProcessorRetrieveAndProcessVulnerabilities(context).process(phase, context);
	}
	
	protected abstract String getVulnBugLinkFieldName();
	protected String getVulnBugIdFieldName() { return null; }
	
	
	/**
	 * Subclasses must implement this method to create the actual processor
	 * for retrieving and processing vulnerabilities. Usually implementations
	 * would do something like
	 * 'return new ProcessorType(getVulnerabilityQuery(context), getVulnerabilityProcessor(), getPurpose());'
	 * @param context
	 * @return
	 */
	protected abstract IProcessor createProcessorRetrieveAndProcessVulnerabilities(Context context);
	
	/**
	 * Subclasses must implement this method to return a processor helper implementation
	 * @return Type of processor
	 */
	protected abstract SourceVulnerabilityProcessorHelper getSourceVulnerabilityProcessorHelper();

	protected final String getPurpose() {
		return getSourceVulnerabilityProcessorHelper().getPurpose();
	}
	
	protected final IProcessorWithBugTrackerName getVulnerabilityProcessor() {
		return getSourceVulnerabilityProcessorHelper().getVulnerabilityProcessor();
	}
	
	protected final IRestConnectionQuery getVulnerabilityQuery(Context context) {
		return getSourceVulnerabilityProcessorHelper().getVulnerabilityQuery(context);
	}
	
	/**
	 * Check the current context. By default this method does nothing; 
	 * subclasses can override this to perform actual context checking.
	 * @param context Context to be checked
	 */
	protected void checkContext(Context context) {}
	
	@Override
	public final String getBugTrackerName() {
		return getVulnerabilityProcessor() == null ? null : getVulnerabilityProcessor().getBugTrackerName();
	}
	
	@Override
	public final boolean isEnabled() {
		return getVulnerabilityProcessor() != null;
	}

	/**
	 * Set the configuration; this is usually auto-wired by Spring
	 * @param configuration
	 */
	@Autowired
	public void setConfiguration(C configuration) {
		this.configuration = configuration;
	}

	/**
	 * Get the configuration
	 * @return
	 */
	public C getConfiguration() {
		return configuration;
	}
	
	protected abstract class SourceVulnerabilityProcessorHelper {
		public abstract String getPurpose();
		public abstract IProcessorWithBugTrackerName getVulnerabilityProcessor();
		public abstract AbstractRestConnectionQueryBuilder<?,?> createBaseVulnerabilityQueryBuilder(Context context);
		
		public final IRestConnectionQuery getVulnerabilityQuery(Context context) {
			AbstractRestConnectionQueryBuilder<?,?> queryBuilder = createBaseVulnerabilityQueryBuilder(context);
			updateVulnerabilityQuery(queryBuilder);
			return queryBuilder.build();
		}
		
		/**
		 * Update the vulnerability query configuration with generic settings
		 * for both submit and update operations.
		 * @param config
		 */
		protected void updateVulnerabilityQuery(AbstractRestConnectionQueryBuilder<?,?> queryBuilder) {
			addOnDemandVulnerabilityData(queryBuilder);
			queryBuilder.preProcessor(new JSONMapEnrichWithVulnState(getConfiguration().getIsVulnerabilityOpenExpression()));
		}
		
		/**
		 * Add on-demand extra vulnerability data as defined in the configuration
		 * @param config
		 */
		private void addOnDemandVulnerabilityData(AbstractRestConnectionQueryBuilder<?,?> queryBuilder) {
			Map<String, String> extraVulnerabilityData = getConfiguration().getExtraVulnerabilityData();
			if ( extraVulnerabilityData != null ) {
				for ( Map.Entry<String, String> entry : extraVulnerabilityData.entrySet() ) {
					String propertyName = entry.getKey();
					String uriString = StringUtils.substringBeforeLast(entry.getValue(), ";");
					// TODO Parse properly as properties, to allow additional properties if ever necessary
					boolean useCache = "useCache=true".equals(StringUtils.substringAfterLast(entry.getValue(), ";"));
					queryBuilder.onDemand(propertyName, uriString, useCache?propertyName:null);
				}
			}
		}
	}
	
	protected abstract class SourceVulnerabilityProcessorHelperSubmit extends SourceVulnerabilityProcessorHelper {
		@Override
		public final String getPurpose() { return "submitting new vulnerabilities"; }
		@Override
		public final IProcessorSubmitIssueForVulnerabilities getVulnerabilityProcessor() { return getVulnerabilityProcessorForSubmit(); }
		
		@Override
		protected void updateVulnerabilityQuery(AbstractRestConnectionQueryBuilder<?, ?> queryBuilder) {
			super.updateVulnerabilityQuery(queryBuilder);
			if ( getConfiguration().getRegExFiltersForVulnerabilitiesToBeSubmitted()!=null ) {
				queryBuilder.preProcessor(new JSONMapFilterRegEx(MatchMode.INCLUDE, getConfiguration().getRegExFiltersForVulnerabilitiesToBeSubmitted()));
			}
		}
	}
	
	protected abstract class SourceVulnerabilityProcessorHelperUpdate extends SourceVulnerabilityProcessorHelper {
		@Override
		public final String getPurpose() { return "updating state"; }
		@Override
		public final IProcessorWithBugTrackerName getVulnerabilityProcessor() { return getVulnerabilityProcessorForUpdate(); }
	}
}
