/*******************************************************************************
 * (c) Copyright 2017 Hewlett Packard Enterprise Development LP
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the Software"),
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.processrunner.ssc.vulnerability;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import com.fortify.processrunner.common.bugtracker.issue.IssueStateDetailsRetriever;
import com.fortify.processrunner.common.bugtracker.issue.SubmittedIssue;
import com.fortify.processrunner.common.bugtracker.issue.SubmittedIssueAndIssueStateDetailsRetriever;
import com.fortify.processrunner.common.source.vulnerability.IVulnerabilityUpdater;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.processor.IProcessor;
import com.fortify.processrunner.ssc.appversion.ISSCApplicationVersionFilter;
import com.fortify.processrunner.ssc.appversion.ISSCApplicationVersionFilterFactory;
import com.fortify.processrunner.ssc.appversion.SSCApplicationVersionBugTrackerNameFilter;
import com.fortify.processrunner.ssc.appversion.SSCApplicationVersionCustomTagFilter;
import com.fortify.processrunner.ssc.connection.SSCConnectionFactory;
import com.fortify.processrunner.ssc.context.IContextSSCSource;
import com.fortify.processrunner.ssc.processor.filter.SSCFilterOnBugURL;
import com.fortify.processrunner.ssc.processor.filter.SSCFilterOnTopLevelField;
import com.fortify.ssc.connection.SSCAuthenticatingRestConnection;
import com.fortify.util.spring.SpringExpressionUtil;
import com.fortify.util.spring.expression.TemplateExpression;

public class SSCVulnerabilityUpdater implements IVulnerabilityUpdater, ISSCApplicationVersionFilterFactory {
	private String bugLinkCustomTagName = null;
	private Map<String,TemplateExpression> extraCustomTags = null;
	
	/**
	 * Check whether current application version has the correct configuration
	 * @param context
	 * @return
	 */
	public boolean checkContext(Context context) {
		IContextSSCSource ctx = context.as(IContextSSCSource.class);
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ctx.getSSCApplicationVersionId();
		if ( getBugLinkCustomTagName()!=null ) {
			List<String> customTagNames = conn.getApplicationVersionCustomTagNames(applicationVersionId);
			if ( customTagNames==null || !customTagNames.contains(getBugLinkCustomTagName()) ) {
				throw new IllegalStateException("Configured custom tag "+getBugLinkCustomTagName()+" is not available for application version "+applicationVersionId);
			}
		} else {
			String bugTrackerName = conn.getApplicationVersionBugTrackerShortName(applicationVersionId);
			if ( !"Add Existing Bugs".equals(bugTrackerName) ) {
				throw new IllegalStateException("Either custom tag name or the 'Add Existing Bugs' SSC bug tracker needs to be configured");
			}
		}
		return true;
	}
	
	/**
	 * Generate SSC application version filter based on either {@link #bugLinkCustomTagName} (if configured)
	 * or availability of the 'Add Existing Bugs' bug tracker integration.
	 */
	public Collection<ISSCApplicationVersionFilter> getSSCApplicationVersionFilters(Context context) {
		if ( getBugLinkCustomTagName()!=null ) {
			SSCApplicationVersionCustomTagFilter filter = new SSCApplicationVersionCustomTagFilter();
			filter.setCustomTagNames(new HashSet<String>(Arrays.asList(getBugLinkCustomTagName())));
			return Arrays.asList((ISSCApplicationVersionFilter)filter);
		} else {
			SSCApplicationVersionBugTrackerNameFilter filter = new SSCApplicationVersionBugTrackerNameFilter();
			filter.setBugTrackerPluginNames(new HashSet<String>(Arrays.asList("Add Existing Bugs")));
			return Arrays.asList((ISSCApplicationVersionFilter)filter);
		}
	}
	
	/**
	 * Create filters to include only vulnerabilities that have not yet been submitted
	 */
	public IProcessor createVulnerabilityNotYetSubmittedFilter() {
		if ( getBugLinkCustomTagName()!=null ) {
			return new SSCFilterOnTopLevelField(getBugLinkCustomTagName(), "<none>", false);
		} else {
			return new SSCFilterOnBugURL(true);
		}
	}
	
	/**
	 * Create filters to include only vulnerabilities that have already been submitted
	 */
	public IProcessor createVulnerabilityAlreadySubmittedFilter() {
		if ( getBugLinkCustomTagName()!=null ) {
			return new SSCFilterOnTopLevelField(getBugLinkCustomTagName(), "<none>", true);
		} else {
			return new SSCFilterOnBugURL(false);
		}
	}

	@SuppressWarnings("unchecked")
	public void updateVulnerabilityStateForNewIssue(Context context, String bugTrackerName, SubmittedIssue submittedIssue, IssueStateDetailsRetriever<?> issueStateDetailsRetriever, Collection<Object> vulnerabilities) {
		IContextSSCSource ctx = context.as(IContextSSCSource.class);
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ctx.getSSCApplicationVersionId();
		Map<String,String> customTagValues = getExtraCustomTagValues(context, submittedIssue, issueStateDetailsRetriever);
		// TODO Remove extra custom tags that are not configured on application version 
		if ( getBugLinkCustomTagName()!=null ) {
			customTagValues.put(getBugLinkCustomTagName(), submittedIssue.getDeepLink());
			conn.setCustomTagValues(applicationVersionId, customTagValues, vulnerabilities);
		} else {
			if ( !customTagValues.isEmpty() ) {
				// Probably the vulnerability revision changes when calling conn.fileBug() below,
				// so we need to set the custom tag values before adding the bug link
				conn.setCustomTagValues(applicationVersionId, customTagValues, vulnerabilities);
			}
			Map<String, Object> issueDetails = new HashMap<String, Object>();
			issueDetails.put("existingBugLink", submittedIssue.getDeepLink());
			List<String> issueInstanceIds = SpringExpressionUtil.evaluateExpression(vulnerabilities, "#root.![issueInstanceId]", List.class);
			conn.fileBug(applicationVersionId, issueDetails, issueInstanceIds);
		}
	}

	public void updateVulnerabilityStateForExistingIssue(Context context, String bugTrackerName, SubmittedIssue submittedIssue, IssueStateDetailsRetriever<?> issueStateDetailsRetriever, Collection<Object> vulnerabilities) {
		Map<String,String> customTagValues = getExtraCustomTagValues(context, submittedIssue, issueStateDetailsRetriever);
		if ( !customTagValues.isEmpty() ) {
			IContextSSCSource ctx = context.as(IContextSSCSource.class);
			SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
			String applicationVersionId = ctx.getSSCApplicationVersionId();
			conn.setCustomTagValues(applicationVersionId, customTagValues, vulnerabilities);
		}
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" }) // TODO Can we refactor such that we don't need to suppress these warnings?
	private Map<String,String> getExtraCustomTagValues(Context context, SubmittedIssue submittedIssue, IssueStateDetailsRetriever<?> issueStateDetailsRetriever) {
		Map<String,String> result = new HashMap<String,String>();
		if ( getExtraCustomTags()!=null ) {
			List<String> availableCustomTagNames = getCustomTagNames(context);
			SubmittedIssueAndIssueStateDetailsRetriever<?> data = new SubmittedIssueAndIssueStateDetailsRetriever(context, submittedIssue, issueStateDetailsRetriever);
			for ( Map.Entry<String, TemplateExpression> entry : getExtraCustomTags().entrySet() ) {
				if ( availableCustomTagNames.contains(entry.getKey()) ) {
					result.put(entry.getKey(), SpringExpressionUtil.evaluateExpression(data, entry.getValue(), String.class));
				}
			}
		}
		return result;
	}

	private List<String> getCustomTagNames(Context context) {
		IContextSSCSource ctx = context.as(IContextSSCSource.class);
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ctx.getSSCApplicationVersionId();
		return conn.getApplicationVersionCustomTagNames(applicationVersionId);
	}

	public String getBugLinkCustomTagName() {
		return bugLinkCustomTagName;
	}

	public void setBugLinkCustomTagName(String bugLinkCustomTagName) {
		this.bugLinkCustomTagName = bugLinkCustomTagName;
	}

	public Map<String,TemplateExpression> getExtraCustomTags() {
		return extraCustomTags;
	}

	public void setExtraCustomTags(Map<String,TemplateExpression> extraCustomTags) {
		this.extraCustomTags = extraCustomTags;
	}
	

}
