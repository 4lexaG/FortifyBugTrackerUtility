/*******************************************************************************
 * (c) Copyright 2017 EntIT Software LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.processrunner.ssc.processor.composite;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.fortify.api.ssc.connection.SSCAuthenticatingRestConnection;
import com.fortify.api.ssc.connection.api.query.builder.SSCApplicationVersionIssuesQueryBuilder;
import com.fortify.api.util.rest.query.IRestConnectionQuery;
import com.fortify.api.util.spring.expression.TemplateExpression;
import com.fortify.processrunner.common.bugtracker.issue.IIssueStateDetailsRetriever;
import com.fortify.processrunner.common.bugtracker.issue.SubmittedIssue;
import com.fortify.processrunner.common.bugtracker.issue.SubmittedIssueAndIssueStateDetailsRetriever;
import com.fortify.processrunner.common.json.preprocessor.JSONMapEnrichWithVulnState;
import com.fortify.processrunner.common.processor.IProcessorWithBugTrackerName;
import com.fortify.processrunner.common.processor.IProcessorWithBugTrackerNameAndEnabledFlag;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.context.ContextPropertyDefinition;
import com.fortify.processrunner.context.ContextPropertyDefinitions;
import com.fortify.processrunner.context.ContextSpringExpressionUtil;
import com.fortify.processrunner.processor.IProcessor;
import com.fortify.processrunner.ssc.connection.SSCConnectionFactory;
import com.fortify.processrunner.ssc.context.IContextSSCCommon;
import com.fortify.processrunner.ssc.json.preprocessor.SSCJSONMapEnrichWithOnDemandBugURLFromCustomTag;
import com.fortify.processrunner.ssc.processor.retrieve.SSCProcessorRetrieveVulnerabilities;

/**
 * This abstract {@link IProcessor} implementation provides some common functionality used by 
 * {@link SSCProcessorSubmitVulnerabilities} and {@link SSCProcessorUpdateState}, like storing 
 * the {@link SSCBugTrackerProcessorConfiguration}, checking the {@link Context}, and providing 
 * SSC connection-related {@link ContextPropertyDefinition} instances.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractSSCVulnerabilityProcessor implements IProcessorWithBugTrackerNameAndEnabledFlag {
	private SSCBugTrackerProcessorConfiguration configuration;

	/**
	 * Add SSC connection property definitions
	 */
	@Override
	public final void addContextPropertyDefinitions(ContextPropertyDefinitions contextPropertyDefinitions, Context context) {
		SSCConnectionFactory.addContextPropertyDefinitions(contextPropertyDefinitions, context);
		contextPropertyDefinitions.add(new ContextPropertyDefinition(IContextSSCCommon.PRP_SSC_APPLICATION_VERSION_ID, "SSC application version id from which to retrieve vulnerabilities", true));
		if ( getVulnerabilityProcessor() != null ) {
			getVulnerabilityProcessor().addContextPropertyDefinitions(contextPropertyDefinitions, context);
		}
	}

	@Override
	public boolean process(Phase phase, Context context) {
		if ( Phase.PRE_PROCESS.equals(phase) ) { checkContext(context); }
		return createSSCProcessorRetrieveAndProcessVulnerabilities(context).process(phase, context);
	}
	
	protected IProcessor createSSCProcessorRetrieveAndProcessVulnerabilities(Context context) {
		return new SSCProcessorRetrieveVulnerabilities(getVulnerabilityQuery(context), getVulnerabilityProcessor(), getPurpose());
	}

	protected abstract String getPurpose();
	
	protected abstract IProcessorWithBugTrackerName getVulnerabilityProcessor();
	
	protected abstract IRestConnectionQuery getVulnerabilityQuery(Context context);
	
	@Override
	public String getBugTrackerName() {
		return getVulnerabilityProcessor() == null ? null : getVulnerabilityProcessor().getBugTrackerName();
	}
	
	@Override
	public boolean isEnabled() {
		return getVulnerabilityProcessor() != null;
	}

	/**
	 * Set the {@link SSCBugTrackerProcessorConfiguration}; this is usually auto-wired by Spring
	 * @param configuration
	 */
	@Autowired
	public void setConfiguration(SSCBugTrackerProcessorConfiguration configuration) {
		this.configuration = configuration;
	}

	/**
	 * Get the {@link SSCBugTrackerProcessorConfiguration}
	 * @return
	 */
	public SSCBugTrackerProcessorConfiguration getConfiguration() {
		return configuration;
	}
	
	protected SSCApplicationVersionIssuesQueryBuilder createVulnerabilityBaseQueryBuilder(Context context) {
		IContextSSCCommon ctx = context.as(IContextSSCCommon.class);
		SSCApplicationVersionIssuesQueryBuilder result = SSCConnectionFactory.getConnection(context).api().issue()
				.queryIssues(ctx.getSSCApplicationVersionId())
				.onDemandDetails()
				.preProcessor(new JSONMapEnrichWithVulnState(getConfiguration().getIsVulnerabilityOpenExpression()));
		if ( StringUtils.isNotBlank(getConfiguration().getBugLinkCustomTagName()) ) {
			result.preProcessor(new SSCJSONMapEnrichWithOnDemandBugURLFromCustomTag(getConfiguration().getBugLinkCustomTagName()));
		}
		return result;
	}
	
	protected boolean needCustomTagUpdate(Context context, String customTagName, String newCustomTagValue, Collection<Object> vulnerabilities) {
		return ContextSpringExpressionUtil.evaluateExpression(context, vulnerabilities, 
				"#this.?[" // Filter list of vulnerabilities 
				+"details.customTagValues.?[customTagName=='"+customTagName+"'].size()==0" // Where custom tag is not yet set
				+" || " // Or
				+"details.customTagValues.?[customTagName=='"+customTagName+"' && textValue!='"+newCustomTagValue+"'].size()>0" // Where current value is different than new value
				+"].size()>0" // Return true if there are any such vulnerabilities, false if there are none
				, Boolean.class);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" }) // TODO Can we refactor such that we don't need to suppress these warnings?
	protected Map<String,String> getExtraCustomTagValues(Context context, SubmittedIssue submittedIssue, IIssueStateDetailsRetriever<?> issueStateDetailsRetriever, Collection<Object> vulnerabilities) {
		Map<String,String> result = new HashMap<String,String>();
		if ( getConfiguration().getExtraCustomTags()!=null ) {
			List<String> availableCustomTagNames = getCustomTagNames(context);
			SubmittedIssueAndIssueStateDetailsRetriever<?> data = new SubmittedIssueAndIssueStateDetailsRetriever(context, submittedIssue, issueStateDetailsRetriever);
			for ( Map.Entry<String, TemplateExpression> entry : getConfiguration().getExtraCustomTags().entrySet() ) {
				if ( availableCustomTagNames.contains(entry.getKey()) ) {
					String customTagName = entry.getKey();
					String newCustomTagValue = ContextSpringExpressionUtil.evaluateExpression(context, data, entry.getValue(), String.class);
					if ( needCustomTagUpdate(context, customTagName, newCustomTagValue, vulnerabilities) ) {
						result.put(entry.getKey(), newCustomTagValue);
					}
				}
			}
		}
		return result;
	}

	protected List<String> getCustomTagNames(Context context) {
		IContextSSCCommon ctx = context.as(IContextSSCCommon.class);
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ctx.getSSCApplicationVersionId();
		return conn.api().customTag().getApplicationVersionCustomTagNames(applicationVersionId);
	}
	
	/**
	 * Check whether current application version has the correct configuration
	 * for updating vulnerability state based on our configuration.
	 * @param context
	 * @return
	 */
	private boolean checkContext(Context context) {
		IContextSSCCommon ctx = context.as(IContextSSCCommon.class);
		SSCAuthenticatingRestConnection conn = SSCConnectionFactory.getConnection(context);
		String applicationVersionId = ctx.getSSCApplicationVersionId();
		if ( StringUtils.isNotBlank(getConfiguration().getBugLinkCustomTagName()) ) {
			List<String> customTagNames = conn.api().customTag().getApplicationVersionCustomTagNames(applicationVersionId);
			if ( customTagNames==null || !customTagNames.contains(getConfiguration().getBugLinkCustomTagName()) ) {
				throw new IllegalStateException("Configured custom tag "+getConfiguration().getBugLinkCustomTagName()+" is not available for application version "+applicationVersionId);
			}
		} else if ( getConfiguration().isAddNativeBugLink() ) {
			String bugTrackerName = conn.api().bugTracker().getApplicationVersionBugTrackerShortName(applicationVersionId);
			if ( !"Add Existing Bugs".equals(bugTrackerName) ) {
				throw new IllegalStateException("Either custom tag name or the 'Add Existing Bugs' SSC bug tracker needs to be configured");
			}
		}
		return true;
	}
}
