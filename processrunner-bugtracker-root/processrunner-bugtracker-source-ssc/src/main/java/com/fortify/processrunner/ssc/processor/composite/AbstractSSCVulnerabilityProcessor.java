/*******************************************************************************
 * (c) Copyright 2017 Hewlett Packard Enterprise Development LP
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the Software"),
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.processrunner.ssc.processor.composite;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.context.ContextPropertyDefinitions;
import com.fortify.processrunner.processor.AbstractCompositeProcessor;
import com.fortify.processrunner.processor.IProcessor;
import com.fortify.processrunner.ssc.connection.SSCConnectionFactory;

/**
 * This abstract {@link IProcessor} implementation provides some common functionality used by 
 * {@link SSCProcessorSubmitVulnerabilities} and {@link SSCProcessorUpdateState}, like storing 
 * the {@link SSCBugTrackerProcessorConfiguration}, checking the {@link Context}, and providing 
 * SSC connection-related {@link ContextPropertyDefinition} instances.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractSSCVulnerabilityProcessor extends AbstractCompositeProcessor {
	private SSCBugTrackerProcessorConfiguration configuration;

	/**
	 * Add SSC connection property definitions
	 */
	@Override
	protected final void addCompositeContextPropertyDefinitions(ContextPropertyDefinitions contextPropertyDefinitions, Context context) {
		SSCConnectionFactory.addContextPropertyDefinitions(contextPropertyDefinitions, context);
	}

	/**
	 * This method calls {@link SSCBugTrackerProcessorConfiguration#checkContext(Context)} to check the
	 * current application version configuration
	 */
	@Override
	protected final boolean preProcess(Context context) {
		return configuration.checkContext(context) && super.preProcess(context);
	}

	@Override
	public final List<IProcessor> getProcessors() {
		return Arrays.asList(createSSCProcessorRetrieveAndProcessVulnerabilities());
	}
	
	protected abstract IProcessor createSSCProcessorRetrieveAndProcessVulnerabilities();

	/**
	 * Set the {@link SSCBugTrackerProcessorConfiguration}; this is usually auto-wired by Spring
	 * @param configuration
	 */
	@Autowired
	public void setConfiguration(SSCBugTrackerProcessorConfiguration configuration) {
		this.configuration = configuration;
	}

	/**
	 * Get the {@link SSCBugTrackerProcessorConfiguration}
	 * @return
	 */
	public SSCBugTrackerProcessorConfiguration getConfiguration() {
		return configuration;
	}
}