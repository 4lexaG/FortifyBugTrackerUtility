/*******************************************************************************
 * (c) Copyright 2017 Hewlett Packard Enterprise Development LP
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the Software"),
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.processrunner.fod.vulnerability;

import java.util.Collection;

import com.fortify.fod.connection.FoDAuthenticatingRestConnection;
import com.fortify.processrunner.common.bugtracker.issue.IssueStateDetailsRetriever;
import com.fortify.processrunner.common.bugtracker.issue.SubmittedIssue;
import com.fortify.processrunner.common.bugtracker.issue.SubmittedIssueCommentHelper;
import com.fortify.processrunner.common.source.vulnerability.IVulnerabilityUpdater;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.fod.connection.FoDConnectionFactory;
import com.fortify.processrunner.fod.context.IContextFoD;
import com.fortify.processrunner.fod.processor.enrich.FoDProcessorEnrichWithBugDataFromComment;
import com.fortify.processrunner.fod.processor.enrich.FoDProcessorEnrichWithExtraFoDData;
import com.fortify.processrunner.fod.processor.filter.FoDFilterOnBugSubmittedComment;
import com.fortify.processrunner.fod.processor.filter.FoDFilterOnBugSubmittedField;
import com.fortify.processrunner.fod.processor.filter.FoDFilterOnHasCommentsField;
import com.fortify.processrunner.processor.CompositeProcessor;
import com.fortify.processrunner.processor.IProcessor;
import com.fortify.util.spring.SpringExpressionUtil;

public class FoDVulnerabilityUpdater implements IVulnerabilityUpdater {
	private boolean useFoDCommentForSubmittedBugs = false;
	
	/**
	 * Create filters to include only vulnerabilities that have not yet been submitted
	 */
	public IProcessor createVulnerabilityNotYetSubmittedFilter() {
		IProcessor result = null;
		if ( !isUseFoDCommentForSubmittedBugs() ) {
			result = new FoDFilterOnBugSubmittedField("false");
		} else {
			result = new CompositeProcessor(
				// Add processor to add FoD summary data as required by FoDFilterOnBugSubmittedComment
				new FoDProcessorEnrichWithExtraFoDData("summary"),
				// Add comment-based filter to include only vulnerabilities that have not yet been submitted 
				// to the bug tracker
				new FoDFilterOnBugSubmittedComment(true)
			);
		}
		return result;
	}
	
	/**
	 * Create filters to include only vulnerabilities that have already been submitted
	 */
	public IProcessor createVulnerabilityAlreadySubmittedFilter() {
		IProcessor result = null;
		if ( !isUseFoDCommentForSubmittedBugs() ) {
			result = new FoDFilterOnBugSubmittedField("true");
		} else {
			result = new CompositeProcessor(
				// Add top-level field filter to include only vulnerabilities with comments
				// (to avoid loading summary data if there are no comments anyway)
				new FoDFilterOnHasCommentsField("true"),
				// Add processor to add FoD summary data as required by FoDFilterOnBugSubmittedComment
				new FoDProcessorEnrichWithExtraFoDData("summary"),
				// Add comment-based filter to include only vulnerabilities that have already been submitted 
				// to the bug tracker
				new FoDFilterOnBugSubmittedComment(false),
				// Add processor to add bugLink (and bugId?) fields from comment to vulnerability
				new FoDProcessorEnrichWithBugDataFromComment()
			);
		}
		return result;
	}

	@SuppressWarnings("unchecked")
	public void updateVulnerabilityStateForNewIssue(Context context, String bugTrackerName, SubmittedIssue submittedIssue, IssueStateDetailsRetriever<?> issueStateDetailsRetriever, Collection<Object> vulnerabilities) {
		IContextFoD ctx = context.as(IContextFoD.class);
		FoDAuthenticatingRestConnection conn = FoDConnectionFactory.getConnection(context);
		String releaseId = ctx.getFoDReleaseId();
		Collection<String> vulnIds = SpringExpressionUtil.evaluateExpression(vulnerabilities, "#root.![vulnId]", Collection.class);
		if ( isUseFoDCommentForSubmittedBugs() ) {
			String comment = SubmittedIssueCommentHelper.getCommentForSubmittedIssue(bugTrackerName, submittedIssue);
			conn.addCommentToVulnerabilities(releaseId, comment, vulnIds);
		} else {
			conn.addBugLinkToVulnerabilities(releaseId, submittedIssue.getDeepLink(), vulnIds);
		}
	}

	public void updateVulnerabilityStateForExistingIssue(Context context, String bugTrackerName, SubmittedIssue submittedIssue, IssueStateDetailsRetriever<?> issueStateDetailsRetriever, Collection<Object> vulnerabilities) {
		
	}

	public boolean isUseFoDCommentForSubmittedBugs() {
		return useFoDCommentForSubmittedBugs;
	}

	public void setUseFoDCommentForSubmittedBugs(boolean useFoDCommentForSubmittedBugs) {
		this.useFoDCommentForSubmittedBugs = useFoDCommentForSubmittedBugs;
	}

}
