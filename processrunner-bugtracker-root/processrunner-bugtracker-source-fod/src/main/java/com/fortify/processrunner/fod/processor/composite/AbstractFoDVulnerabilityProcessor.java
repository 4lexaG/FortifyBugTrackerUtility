/*******************************************************************************
 * (c) Copyright 2017 EntIT Software LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.processrunner.fod.processor.composite;

import org.springframework.beans.factory.annotation.Autowired;

import com.fortify.api.fod.connection.api.query.builder.FoDReleaseVulnerabilitiesQueryBuilder;
import com.fortify.api.util.rest.query.IRestConnectionQuery;
import com.fortify.processrunner.common.json.preprocessor.JSONMapEnrichWithVulnState;
import com.fortify.processrunner.common.processor.IProcessorWithBugTrackerName;
import com.fortify.processrunner.common.processor.IProcessorWithBugTrackerNameAndEnabledFlag;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.context.ContextPropertyDefinition;
import com.fortify.processrunner.context.ContextPropertyDefinitions;
import com.fortify.processrunner.fod.connection.FoDConnectionFactory;
import com.fortify.processrunner.fod.context.IContextFoD;
import com.fortify.processrunner.fod.json.preprocessor.FoDJSONMapEnrichWithOnDemandBugLinkFromComment;
import com.fortify.processrunner.fod.processor.retrieve.FoDProcessorRetrieveVulnerabilities;
import com.fortify.processrunner.processor.IProcessor;

/**
 * This abstract {@link IProcessor} implementation provides some common functionality used by 
 * {@link FoDProcessorSubmitVulnerabilities} and {@link FoDProcessorUpdateState}, like storing 
 * the {@link FoDBugTrackerProcessorConfiguration}, checking the {@link Context}, and providing 
 * FoD connection-related {@link ContextPropertyDefinition} instances.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractFoDVulnerabilityProcessor implements IProcessorWithBugTrackerNameAndEnabledFlag {
	private FoDBugTrackerProcessorConfiguration configuration;

	/**
	 * Add FoD connection property definitions
	 */
	@Override
	public final void addContextPropertyDefinitions(ContextPropertyDefinitions contextPropertyDefinitions, Context context) {
		FoDConnectionFactory.addContextPropertyDefinitions(contextPropertyDefinitions, context);
		contextPropertyDefinitions.add(new ContextPropertyDefinition("FoDReleaseId","FoD release id from which to retrieve vulnerabilities",true));
		if ( getVulnerabilityProcessor() != null ) {
			getVulnerabilityProcessor().addContextPropertyDefinitions(contextPropertyDefinitions, context);
		}
	}

	@Override
	public boolean process(Phase phase, Context context) {
		return createFoDProcessorRetrieveAndProcessVulnerabilities(context).process(phase, context);
	}
	
	protected IProcessor createFoDProcessorRetrieveAndProcessVulnerabilities(Context context) {
		return new FoDProcessorRetrieveVulnerabilities(getVulnerabilityQuery(context), getVulnerabilityProcessor(), getPurpose());
	}

	protected abstract String getPurpose();
	
	protected abstract IProcessorWithBugTrackerName getVulnerabilityProcessor();
	
	protected abstract IRestConnectionQuery getVulnerabilityQuery(Context context);
	
	@Override
	public String getBugTrackerName() {
		return getVulnerabilityProcessor() == null ? null : getVulnerabilityProcessor().getBugTrackerName();
	}
	
	@Override
	public boolean isEnabled() {
		return getVulnerabilityProcessor() != null;
	}

	/**
	 * Set the {@link FoDBugTrackerProcessorConfiguration}; this is usually auto-wired by Spring
	 * @param configuration
	 */
	@Autowired
	public void setConfiguration(FoDBugTrackerProcessorConfiguration configuration) {
		this.configuration = configuration;
	}

	/**
	 * Get the {@link FoDBugTrackerProcessorConfiguration}
	 * @return
	 */
	public FoDBugTrackerProcessorConfiguration getConfiguration() {
		return configuration;
	}
	
	protected FoDReleaseVulnerabilitiesQueryBuilder createVulnerabilityBaseQueryBuilder(Context context) {
		IContextFoD ctx = context.as(IContextFoD.class);
		FoDReleaseVulnerabilitiesQueryBuilder result = FoDConnectionFactory.getConnection(context).api().vulnerability()
				.queryVulnerabilities(ctx.getFoDReleaseId())
				.onDemandAll()
				.preProcessor(new JSONMapEnrichWithVulnState(getConfiguration().getIsVulnerabilityOpenExpression()));
		if ( getConfiguration().isAddBugDataAsComment() ) {
			result.preProcessor(new FoDJSONMapEnrichWithOnDemandBugLinkFromComment(getBugTrackerName()));
		}
		return result;
	}
}
