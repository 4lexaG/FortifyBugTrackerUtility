/*******************************************************************************
 * (c) Copyright 2017 EntIT Software LLC, a Micro Focus company
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.processrunner.fod.processor.composite;

import com.fortify.client.fod.api.FoDVulnerabilityAPI;
import com.fortify.client.fod.api.query.builder.FoDReleaseVulnerabilitiesQueryBuilder;
import com.fortify.processrunner.common.json.preprocessor.JSONMapEnrichWithVulnState;
import com.fortify.processrunner.common.processor.AbstractSourceVulnerabilityProcessor;
import com.fortify.processrunner.context.Context;
import com.fortify.processrunner.context.ContextPropertyDefinition;
import com.fortify.processrunner.context.ContextPropertyDefinitions;
import com.fortify.processrunner.fod.connection.FoDConnectionFactory;
import com.fortify.processrunner.fod.context.IContextFoD;
import com.fortify.processrunner.fod.json.preprocessor.enrich.FoDJSONMapEnrichWithOnDemandBugLinkFromComment;
import com.fortify.processrunner.fod.processor.retrieve.FoDProcessorRetrieveVulnerabilities;
import com.fortify.processrunner.processor.IProcessor;

/**
 * This abstract {@link IProcessor} implementation provides some common functionality used by 
 * {@link FoDProcessorSubmitVulnerabilities} and {@link FoDProcessorUpdateState}, like storing 
 * the {@link FoDBugTrackerProcessorConfiguration}, checking the {@link Context}, and providing 
 * FoD connection-related {@link ContextPropertyDefinition} instances.
 * 
 * @author Ruud Senden
 *
 */
public abstract class AbstractFoDVulnerabilityProcessor extends AbstractSourceVulnerabilityProcessor<FoDBugTrackerProcessorConfiguration> {

	/**
	 * Add FoD connection property definitions
	 */
	@Override
	public final void addContextPropertyDefinitions(ContextPropertyDefinitions contextPropertyDefinitions, Context context) {
		FoDConnectionFactory.addContextPropertyDefinitions(contextPropertyDefinitions, context);
		contextPropertyDefinitions.add(new ContextPropertyDefinition("FoDReleaseId","FoD release id from which to retrieve vulnerabilities",true));
		if ( getVulnerabilityProcessor() != null ) {
			getVulnerabilityProcessor().addContextPropertyDefinitions(contextPropertyDefinitions, context);
		}
	}
	
	@Override
	protected IProcessor createProcessorRetrieveAndProcessVulnerabilities(Context context) {
		return new FoDProcessorRetrieveVulnerabilities(getVulnerabilityQuery(context), getVulnerabilityProcessor(), getPurpose());
	}
	
	@Override
	protected String getVulnBugLinkFieldName() {
		return "bugLink";
	}
	
	@Override
	protected String getVulnBugIdFieldName() {
		return "bugId";
	}
	
	protected FoDReleaseVulnerabilitiesQueryBuilder createFoDVulnerabilityBaseQueryBuilder(Context context) {
		IContextFoD ctx = context.as(IContextFoD.class);
		FoDReleaseVulnerabilitiesQueryBuilder result = FoDConnectionFactory.getConnection(context).api(FoDVulnerabilityAPI.class)
				.queryVulnerabilities(ctx.getFoDReleaseId())
				.onDemandSummary() // Required to get bug link from comments, for user convenience we always make summary available
				.preProcessor(new JSONMapEnrichWithVulnState(getConfiguration().getIsVulnerabilityOpenExpression()));
		if ( getConfiguration().isAddBugDataAsComment() ) {
			result.preProcessor(new FoDJSONMapEnrichWithOnDemandBugLinkFromComment(getBugTrackerName()));
		}
		return result;
	}
}
